app_name: L-memory
version: 1.0.0
description: グループLINEのトーク履歴を記憶し、会話を活性化させるAIアシスタントサービス

system_requirements:
  platform: Node.js
  framework: Hono.js
  target_development_time: 2-3週間
  approach: LINE Bot + AI会話分析

core_features:
  - name: トーク履歴記憶
    description: グループLINEのトーク履歴を保存・分析
    components:
      - @line/bot-sdk
      - OpenAI API
    features:
      - メッセージの自動保存
      - 文脈理解
      - 感情分析
      - トピック分類

  - name: 会話サマリー
    description: グループの会話内容を要約・整理
    features:
      - 重要なポイントの抽出
      - トピックごとの分類
      - 定期的なサマリー配信
      - キーワード抽出

  - name: インタラクティブ応答
    description: グループの文脈に応じた会話促進
    features:
      - 過去の話題の引用
      - 関連する質問の投げかけ
      - メンバーの発言促進
      - 雰囲気に応じた会話介入

  - name: グループ活性化
    description: グループの活性度を監視し、適切なタイミングで介入
    features:
      - 活性度モニタリング
      - 最適なタイミングでの声かけ
      - メンバー間の関係性分析
      - イベントやトピックの提案

technical_stack:
  backend:
    - Hono.js
    - TypeScript
    - @hono/node-server
    - @line/bot-sdk
    - OpenAI API
    - googleapis

  integrations:
    - name: LINE Messaging API
      use_cases:
        - メッセージ受信・解析
        - レスポンス送信
        - Webhook処理
        - グループ管理
      benefits:
        - リアルタイムコミュニケーション
        - グループチャット機能
        - プッシュ通知対応
        - ユーザーフレンドリーなインターフェース

    - name: OpenAI API
      use_cases:
        - 自然言語処理
        - 文脈理解
        - 感情分析
        - 会話生成
      benefits:
        - 高度な言語理解
        - 柔軟な応答生成
        - コンテキストを考慮した応答
        - パーソナライズされたインタラクション

    - name: Google Sheets API
      use_cases:
        - トーク履歴の保存
        - グループ情報の管理
        - ユーザーデータの管理
        - 分析結果の保存
      benefits:
        - 直感的なデータ管理
        - 手動での編集が容易
        - データの可視化
        - 共有・協力機能

project_structure:
  src:
    - index.ts (メインアプリケーション)
    config:
      - line.ts (LINE Bot設定)
      - sheets.ts (Google Sheets設定)
    handlers:
      - webhook-handler.ts (Webhook処理)
      - line-message.ts (メッセージ処理)
    routes:
      - webhook.ts (Webhookルーター)
    services:
      - sheets.ts (Google Sheets操作)

data_structure:
  spreadsheet:
    sheets:
      - income:
          - transactionId: String  # 取引ID
          - date: Date            # 取引日
          - category: String      # 収入種別
          - amount: Number        # 金額
          - client: String        # 取引先
          - memo: String          # 備考

      - transactions:
          - date: Date
          - amount: Number
          - category: String
          - memo: String
          - timestamp: DateTime

      - categories:
          - name: String
          - budget: Number

      - monthly_reports:
          - year: Number
          - month: Number
          - total: Number
          - category_totals: Object

deployment:
  platform: Node.js
  hosting: 
    options:
      - Google Cloud Run
      - Render
      - Railway
  requirements:
    - HTTPS対応
    - 常時起動
    - 環境変数管理

development_considerations:
  common_issues:
    - name: TypeScript型定義とエクスポート
      description: >
        モジュール間で共有する型定義は必ずexportする。特にインターフェースや型エイリアスは
        明示的にexportしないと他のファイルから参照できない。
      example: "export interface MessageData { ... }"
      
    - name: 環境変数の適切な設定
      description: >
        OpenAI APIキーなどの環境変数が正しく設定されていることを確認する。
        APIリクエストのエラーは多くの場合、環境変数の設定ミスが原因。
      example: "process.env.OPENAI_API_KEY"
      
    - name: TypeScriptビルド設定
      description: >
        tsconfig.jsonのoutDirとrootDirを正しく設定し、コンパイル済みファイルが
        適切なディレクトリに出力されるようにする。
      example: "outDir: './dist', rootDir: './src'"
      
    - name: 非同期処理の適切な処理
      description: >
        特にLINE BotのWebhookでは、応答に時間がかかる処理（OpenAI API呼び出しなど）は
        即時応答と後続処理に分けて実装する。
      example: "先に「検索中...」メッセージを返し、結果はpushMessageで送信"
      
    - name: スプレッドシート設定の参照
      description: >
        Google Sheets APIの設定は、正しい設定オブジェクトを参照する。
        特にspreadsheetIdはconfig.spreadsheetIdから参照する。
      example: "spreadsheetId: sheetsConfig.spreadsheetId"
      
    - name: APIレスポンスのフォーマット指定
      description: >
        OpenAI APIからJSONレスポンスを取得する場合は、明示的にresponse_formatを指定する。
        また、システムメッセージで明確な指示を与える。
      example: "response_format: { type: 'json_object' }"
      
    - name: 時間のかかる処理の考慮
      description: >
        APIリクエストには時差があることを考慮し、ユーザーに適切なフィードバックを提供する。
        特にOpenAI APIは応答に数秒から数十秒かかることがある。
      example: "処理状況を示すメッセージの表示"